# Generated by Django 3.2 on 2021-05-20 10:56

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('wagtailcore', '0059_apply_collection_ordering'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseCollectionArtist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('bc_inventory_number', models.CharField(max_length=1024)),
                ('bc_date_acquired', models.CharField(max_length=256)),
                ('bc_change_user', models.CharField(max_length=256)),
                ('bc_change_date', models.CharField(max_length=256)),
                ('bc_dating', models.CharField(max_length=256)),
                ('type', models.CharField(max_length=256)),
                ('first_name', models.CharField(default='', max_length=1024)),
                ('last_name', models.CharField(default='', max_length=1024)),
                ('alias_name', models.CharField(default='', max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='BaseCollectionObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('bc_id', models.IntegerField()),
                ('bc_inventory_number', models.CharField(blank=True, default='', max_length=1024)),
                ('bc_change_user', models.CharField(blank=True, default='', max_length=256)),
                ('bc_change_date', models.CharField(blank=True, default='', max_length=256)),
                ('bc_object_name', models.CharField(blank=True, default='', max_length=256)),
                ('bc_images', models.CharField(blank=True, default='', max_length=1024)),
                ('bc_image_license', models.CharField(blank=True, default='', max_length=256)),
                ('bc_notes', models.CharField(blank=True, default='', max_length=4024)),
                ('bc_credits', models.CharField(blank=True, default='', max_length=1024)),
                ('bc_tags', models.CharField(blank=True, default='', max_length=1024)),
                ('tag_synonyms', models.CharField(default='', max_length=10000)),
                ('publications', models.CharField(blank=True, default='', max_length=1024)),
                ('date_acquired', models.CharField(blank=True, default='', max_length=256)),
                ('datings', models.CharField(blank=True, default='', max_length=1024)),
                ('dating_from_df', models.DateField(blank=True, null=True)),
                ('dating_to_df', models.DateField(blank=True, null=True)),
                ('provenance', models.CharField(blank=True, default='', max_length=1024)),
                ('is_highlight', models.BooleanField(default=False)),
                ('convolute', models.CharField(blank=True, default='', max_length=256)),
                ('series_id', models.CharField(blank=True, max_length=256, null=True)),
                ('container_name', models.CharField(blank=True, default='', max_length=1024)),
                ('container_id', models.CharField(blank=True, default='', max_length=256)),
                ('current_location', models.CharField(blank=True, default='', max_length=256)),
                ('geographic_location', models.CharField(blank=True, default='', max_length=1024)),
                ('title', models.CharField(blank=True, default='', max_length=1024, verbose_name='Titel')),
                ('description', models.CharField(blank=True, default='', max_length=1024)),
                ('signatures', models.CharField(blank=True, default='', max_length=1024, verbose_name='Signatur')),
                ('object_type', models.CharField(blank=True, default='', max_length=1024, verbose_name='Objektbezeichnung')),
                ('material', models.CharField(blank=True, max_length=1024)),
                ('dimensions', models.CharField(blank=True, max_length=1024)),
                ('artist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='collection.basecollectionartist', verbose_name='KÃ¼nstler')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='CollectionObjectSeriesTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CollectionObjectTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ObjectImageLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='obj_img_link', to='collection.basecollectionobject')),
                ('object_image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='obj_img_link', to='core.metahubimage')),
            ],
        ),
        migrations.CreateModel(
            name='MetaHubObjectSeriesPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('promo_title', models.CharField(blank=True, help_text='Optioneel, wordt getoond in plaats van titel als deze pagina op andere plekken gelinkt wordt', max_length=100, verbose_name='Promo titel')),
                ('promo_intro', models.TextField(blank=True, help_text='Korte tekst die wordt getoond als deze pagina op andere plekken gelinkt wordt', verbose_name='Promo intro')),
                ('promo_link', models.CharField(blank=True, help_text="Tekst van het 'lees meer' linkje als deze pagina op andere plekken gelinkt wordt", max_length=50, verbose_name='Lees meer label')),
                ('twitter_hashtags', models.CharField(blank=True, help_text='Commagescheiden lijst van termen die als hashtag worden toegevoegd wanneer gedeeld op twitter, zonder de #', max_length=100, verbose_name='Twitter hashtags')),
                ('series_id', models.CharField(blank=True, default=None, max_length=256, null=True)),
                ('content', wagtail.core.fields.StreamField([('single_richtext', wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.RichTextBlock())])), ('single_video', wagtail.core.blocks.StructBlock([('video', wagtail.core.blocks.StructBlock([('video', wagtail.core.blocks.StructBlock([('src', wagtail.core.blocks.StreamBlock([('youtube', wagtail.core.blocks.StructBlock([('src', wagtail.core.blocks.URLBlock(role='source')), ('title', wagtail.core.blocks.CharBlock(role='title'))])), ('vimeo', wagtail.core.blocks.StructBlock([('src', wagtail.core.blocks.URLBlock(role='source')), ('title', wagtail.core.blocks.CharBlock(role='title'))]))], max_num=1, min_num=1))])), ('video_preview', wagtail.core.blocks.StructBlock([('source', wagtail.images.blocks.ImageChooserBlock())]))], required=True)), ('caption', wagtail.core.blocks.CharBlock(required=False))])), ('single_image', wagtail.core.blocks.StructBlock([('figure', wagtail.core.blocks.StructBlock([('picture', wagtail.core.blocks.StructBlock([('source', wagtail.images.blocks.ImageChooserBlock())], resolution=('1920', '', '', '', '', '', True, True, False))), ('caption', wagtail.core.blocks.CharBlock(required=False))]))])), ('single_audio', wagtail.core.blocks.StructBlock([('audio_fragment', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('file_title', wagtail.core.blocks.CharBlock()), ('file_subtitle', wagtail.core.blocks.CharBlock()), ('file', wagtail.core.blocks.StructBlock([('source', wagtail.core.blocks.StreamBlock([('document', wagtail.documents.blocks.DocumentChooserBlock())], max_num=1, min_num=1))])), ('audio_transcript', wagtail.core.blocks.StructBlock([('source', wagtail.core.blocks.StreamBlock([('page', wagtail.core.blocks.PageChooserBlock()), ('external', wagtail.core.blocks.URLBlock())], blank=True))], blank=True))]))])), ('double_quote_richtext', wagtail.core.blocks.StructBlock([('quote', wagtail.core.blocks.CharBlock(required=True)), ('attribution', wagtail.core.blocks.CharBlock(required=False)), ('text', wagtail.core.blocks.RichTextBlock(required=True))])), ('double_pictures_richtext', wagtail.core.blocks.StructBlock([('picture_large', wagtail.core.blocks.StructBlock([('source', wagtail.images.blocks.ImageChooserBlock())], resolution=('1024', '', '', '', '', '', False, True, False))), ('picture_small', wagtail.core.blocks.StructBlock([('source', wagtail.images.blocks.ImageChooserBlock())], resolution=('1024', '', '', '', '', '', False, True, False))), ('text', wagtail.core.blocks.RichTextBlock(required=True))])), ('objects_choice', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(required=False)), ('cards', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('page', wagtail.core.blocks.PageChooserBlock(page_type=['collection.MetaHubObjectPage'], required=False))])))]))], blank=True)),
                ('promo_image', models.ForeignKey(blank=True, help_text='Optioneel, wordt getoond als deze pagina op andere plekken gelinkt wordt', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.metahubimage', verbose_name='Promo afbeelding')),
                ('share_image', models.ForeignKey(blank=True, help_text='Optioneel, anders wordt promo afbeelding gebruikt, anders de pagina visual en anders de standaard deel afbeelding', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.metahubimage', verbose_name='Share afbeelding')),
                ('tags', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='collection.CollectionObjectSeriesTag', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='MetaHubObjectPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('promo_title', models.CharField(blank=True, help_text='Optioneel, wordt getoond in plaats van titel als deze pagina op andere plekken gelinkt wordt', max_length=100, verbose_name='Promo titel')),
                ('promo_intro', models.TextField(blank=True, help_text='Korte tekst die wordt getoond als deze pagina op andere plekken gelinkt wordt', verbose_name='Promo intro')),
                ('promo_link', models.CharField(blank=True, help_text="Tekst van het 'lees meer' linkje als deze pagina op andere plekken gelinkt wordt", max_length=50, verbose_name='Lees meer label')),
                ('twitter_hashtags', models.CharField(blank=True, help_text='Commagescheiden lijst van termen die als hashtag worden toegevoegd wanneer gedeeld op twitter, zonder de #', max_length=100, verbose_name='Twitter hashtags')),
                ('content', wagtail.core.fields.StreamField([('single_richtext', wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.RichTextBlock())])), ('single_video', wagtail.core.blocks.StructBlock([('video', wagtail.core.blocks.StructBlock([('video', wagtail.core.blocks.StructBlock([('src', wagtail.core.blocks.StreamBlock([('youtube', wagtail.core.blocks.StructBlock([('src', wagtail.core.blocks.URLBlock(role='source')), ('title', wagtail.core.blocks.CharBlock(role='title'))])), ('vimeo', wagtail.core.blocks.StructBlock([('src', wagtail.core.blocks.URLBlock(role='source')), ('title', wagtail.core.blocks.CharBlock(role='title'))]))], max_num=1, min_num=1))])), ('video_preview', wagtail.core.blocks.StructBlock([('source', wagtail.images.blocks.ImageChooserBlock())]))], required=True)), ('caption', wagtail.core.blocks.CharBlock(required=False))])), ('single_image', wagtail.core.blocks.StructBlock([('figure', wagtail.core.blocks.StructBlock([('picture', wagtail.core.blocks.StructBlock([('source', wagtail.images.blocks.ImageChooserBlock())], resolution=('1920', '', '', '', '', '', True, True, False))), ('caption', wagtail.core.blocks.CharBlock(required=False))]))])), ('single_audio', wagtail.core.blocks.StructBlock([('audio_fragment', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('file_title', wagtail.core.blocks.CharBlock()), ('file_subtitle', wagtail.core.blocks.CharBlock()), ('file', wagtail.core.blocks.StructBlock([('source', wagtail.core.blocks.StreamBlock([('document', wagtail.documents.blocks.DocumentChooserBlock())], max_num=1, min_num=1))])), ('audio_transcript', wagtail.core.blocks.StructBlock([('source', wagtail.core.blocks.StreamBlock([('page', wagtail.core.blocks.PageChooserBlock()), ('external', wagtail.core.blocks.URLBlock())], blank=True))], blank=True))]))])), ('double_quote_richtext', wagtail.core.blocks.StructBlock([('quote', wagtail.core.blocks.CharBlock(required=True)), ('attribution', wagtail.core.blocks.CharBlock(required=False)), ('text', wagtail.core.blocks.RichTextBlock(required=True))])), ('double_pictures_richtext', wagtail.core.blocks.StructBlock([('picture_large', wagtail.core.blocks.StructBlock([('source', wagtail.images.blocks.ImageChooserBlock())], resolution=('1024', '', '', '', '', '', False, True, False))), ('picture_small', wagtail.core.blocks.StructBlock([('source', wagtail.images.blocks.ImageChooserBlock())], resolution=('1024', '', '', '', '', '', False, True, False))), ('text', wagtail.core.blocks.RichTextBlock(required=True))]))], blank=True)),
                ('object', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='associated_page', to='collection.basecollectionobject')),
                ('promo_image', models.ForeignKey(blank=True, help_text='Optioneel, wordt getoond als deze pagina op andere plekken gelinkt wordt', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.metahubimage', verbose_name='Promo afbeelding')),
                ('share_image', models.ForeignKey(blank=True, help_text='Optioneel, anders wordt promo afbeelding gebruikt, anders de pagina visual en anders de standaard deel afbeelding', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.metahubimage', verbose_name='Share afbeelding')),
                ('tags', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='collection.CollectionObjectTag', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='MetaHubCategoryOverviewPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('promo_title', models.CharField(blank=True, help_text='Optioneel, wordt getoond in plaats van titel als deze pagina op andere plekken gelinkt wordt', max_length=100, verbose_name='Promo titel')),
                ('promo_intro', models.TextField(blank=True, help_text='Korte tekst die wordt getoond als deze pagina op andere plekken gelinkt wordt', verbose_name='Promo intro')),
                ('promo_link', models.CharField(blank=True, help_text="Tekst van het 'lees meer' linkje als deze pagina op andere plekken gelinkt wordt", max_length=50, verbose_name='Lees meer label')),
                ('twitter_hashtags', models.CharField(blank=True, help_text='Commagescheiden lijst van termen die als hashtag worden toegevoegd wanneer gedeeld op twitter, zonder de #', max_length=100, verbose_name='Twitter hashtags')),
                ('overview_category', models.CharField(choices=[('story', 'Story'), ('object', 'Objekt'), ('object_series', 'Objektseries')], max_length=100)),
                ('promo_image', models.ForeignKey(blank=True, help_text='Optioneel, wordt getoond als deze pagina op andere plekken gelinkt wordt', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.metahubimage', verbose_name='Promo afbeelding')),
                ('share_image', models.ForeignKey(blank=True, help_text='Optioneel, anders wordt promo afbeelding gebruikt, anders de pagina visual en anders de standaard deel afbeelding', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.metahubimage', verbose_name='Share afbeelding')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.AddField(
            model_name='collectionobjecttag',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_objects', to='collection.metahubobjectpage'),
        ),
        migrations.AddField(
            model_name='collectionobjecttag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_collectionobjecttag_items', to='taggit.tag'),
        ),
        migrations.AddField(
            model_name='collectionobjectseriestag',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_object_series', to='collection.metahubobjectseriespage'),
        ),
        migrations.AddField(
            model_name='collectionobjectseriestag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_collectionobjectseriestag_items', to='taggit.tag'),
        ),
        migrations.AddField(
            model_name='basecollectionobject',
            name='bc_tags_separate',
            field=models.ManyToManyField(blank=True, related_name='attached_objects', to='collection.BaseTag'),
        ),
        migrations.AddField(
            model_name='basecollectionobject',
            name='series_page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collection_objects', to='collection.metahubobjectseriespage'),
        ),
    ]
